<!DOCTYPE html>
<html>
<head>
    <!-- Include Leaflet CSS -->
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" integrity="sha256-p4NxAoJBhIIN+hmNHrzRCf9tD/miZyoHS5obTRR9BMY=" crossorigin="" />
    <!-- Include Leaflet library -->
    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js" integrity="sha256-20nQCchB9co0qIjJZRGuk2/Z9VM+kNiyxNV1lvTlZBo=" crossorigin=""></script>
    
    <!-- Include Leaflet MarkerCluster library -->
    <link rel="stylesheet" href="https://unpkg.com/leaflet.markercluster@1.5.1/dist/MarkerCluster.css" />
    <link rel="stylesheet" href="https://unpkg.com/leaflet.markercluster@1.5.1/dist/MarkerCluster.Default.css" />
    <script src="https://unpkg.com/leaflet.markercluster@1.5.1/dist/leaflet.markercluster.js"></script>
</head>
<body>
    
    <p><a href="/">Back</a></p>
    
    <div id="map" style="width: 100%; height: 550px;"></div>
    <script>
        // Fetch weather data from the /weather route
        fetch("/weather")
            .then(response => response.json())
            .then(weather_data => {
                var defaultLatitude = "{{ default_latitude }}";
                var defaultLongitude = "{{ default_longitude }}";

                // Create the map object
                var map = L.map('map').setView([defaultLatitude, defaultLongitude], 8);

                // Add a tile layer to the map
                L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                    attribution: '&copy; OpenStreetMap contributors'
                }).addTo(map);
                console.log(weather_data)
                // Loop through weather data and add markers to the map
                weather_data.forEach(entry => {

                    var latitude = entry.latitude;  // Use the latitude from the entry
                    var longitude = entry.longitude;  // Use the longitude from the entry
                    var temperature = entry.forecast_data.properties.periods[0].temperature;
                    var temperatureUnit = entry.forecast_data.properties.periods[0].temperatureUnit;
                    var iconUrl = entry.forecast_data.properties.periods[0].icon;
                    var shortForecast = entry.forecast_data.properties.periods[0].shortForecast;
                    
                    var marker = L.marker([latitude, longitude], {  // Use the correct latitude and longitude
                        icon: L.icon({
                        iconUrl: iconUrl,
                        iconSize: [48, 48],
                        iconAnchor: [16, 32]
                        })
                    })
                    .addTo(map)
                    .bindPopup(`Temperature: ${temperature} ${temperatureUnit}<br>Forecast: ${shortForecast}`);
                });
            })
            .catch(error => {
                console.error("Error fetching weather data:", error);
            });
    </script>
</body>
</html>




'''if "user_id" in session:
        user = db.users.find_one({"_id": session["user_id"]})
    weather_data = list(db.weather.find(projection={"_id": False}))
    # Convert ObjectId to string in each entry
    for entry in weather_data:
        if "_id" in entry:
            entry["_id"] = str(entry["_id"])
            print(weather_data)'''
